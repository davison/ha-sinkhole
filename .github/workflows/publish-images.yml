# .github/workflows/publish-images.yml
name: Build and Push Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write # Required to push to GHCR

jobs:
  ### --------------------------------------------------------------------
  ###  JOB 1: Detect Changes
  ###  This job checks which image directories have changed.
  ### --------------------------------------------------------------------
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      # We output a single JSON array named 'services'
      # e.g., ["dns-node", "vip-manager"]
      services: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use paths-filter action
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # Define a filter for each image.
          # The 'outputs.changes' will contain an array of the keys
          # for the filters that matched.
          filters: |
            dns-node:
              - 'dns-node/**'
            vip-manager:
              - 'vip-manager/**'
            blocklist-updater:
              - 'blocklist-updater/**'
          # Add more services here as needed
          # new-service:
          #   - 'new-service/**'

  ### --------------------------------------------------------------------
  ###  JOB 2: Build and Push
  ###  Runs a matrix build, one for each service in the output array.
  ### --------------------------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    # Only run this job if the 'services' array is not empty
    if: needs.detect-changes.outputs.services != '[]'
    strategy:
      fail-fast: false
      # Create a matrix from the JSON array output by the 'detect-changes' job
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # *** Set up QEMU for multi-arch emulation ***
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # *** Set up Docker Buildx (the multi-arch builder) ***
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Parameterized to use the matrix variable
      - name: Read version from VERSION file
        id: read_version
        run: |
          echo "version=$(cat ${{ matrix.service }}/VERSION)" >> $GITHUB_OUTPUT

      # Parameterized to use the matrix variable
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            # Tag with the version from the VERSION file
            type=raw,value=${{ steps.read_version.outputs.version }}
            # If this is a push to 'main', also tag as 'latest'
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      # Parameterized to use the matrix variable
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Containerfile
          # Only push if it's NOT a pull request
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ steps.read_version.outputs.version }}
          
          # *** Define all platforms to build ***
          platforms: linux/amd64,linux/arm64

          # *** Add caching to speed up builds ***
          cache-from: type=gha
          cache-to: type=gha,mode=max
